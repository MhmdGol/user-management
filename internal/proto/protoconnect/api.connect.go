// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api.proto

package protoconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
	proto "user-management/internal/proto"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "usermanagement.v1.UserService"
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "usermanagement.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceCreateUserServiceProcedure is the fully-qualified name of the UserService's
	// CreateUserService RPC.
	UserServiceCreateUserServiceProcedure = "/usermanagement.v1.UserService/CreateUserService"
	// UserServiceGetAllUsersServiceProcedure is the fully-qualified name of the UserService's
	// GetAllUsersService RPC.
	UserServiceGetAllUsersServiceProcedure = "/usermanagement.v1.UserService/GetAllUsersService"
	// UserServiceGetInfoServiceProcedure is the fully-qualified name of the UserService's
	// GetInfoService RPC.
	UserServiceGetInfoServiceProcedure = "/usermanagement.v1.UserService/GetInfoService"
	// UserServiceUpdateByIdServiceProcedure is the fully-qualified name of the UserService's
	// UpdateByIdService RPC.
	UserServiceUpdateByIdServiceProcedure = "/usermanagement.v1.UserService/UpdateByIdService"
	// UserServiceDeleteByIdServiceProcedure is the fully-qualified name of the UserService's
	// DeleteByIdService RPC.
	UserServiceDeleteByIdServiceProcedure = "/usermanagement.v1.UserService/DeleteByIdService"
	// AuthServiceLoginServiceProcedure is the fully-qualified name of the AuthService's LoginService
	// RPC.
	AuthServiceLoginServiceProcedure = "/usermanagement.v1.AuthService/LoginService"
	// AuthServiceUpdatePasswordServiceProcedure is the fully-qualified name of the AuthService's
	// UpdatePasswordService RPC.
	AuthServiceUpdatePasswordServiceProcedure = "/usermanagement.v1.AuthService/UpdatePasswordService"
)

// UserServiceClient is a client for the usermanagement.v1.UserService service.
type UserServiceClient interface {
	CreateUserService(context.Context, *connect_go.Request[proto.CreateUserServiceRequest]) (*connect_go.Response[proto.CreateUserServiceResponse], error)
	GetAllUsersService(context.Context, *connect_go.Request[proto.GetAllUsersServiceRequest]) (*connect_go.Response[proto.GetAllUsersServiceResponse], error)
	GetInfoService(context.Context, *connect_go.Request[proto.GetInfoServiceRequest]) (*connect_go.Response[proto.GetInfoServiceResponse], error)
	UpdateByIdService(context.Context, *connect_go.Request[proto.UpdateByIdServiceRequest]) (*connect_go.Response[proto.UpdateByIdServiceResponse], error)
	DeleteByIdService(context.Context, *connect_go.Request[proto.DeleteByIdServiceRequest]) (*connect_go.Response[proto.DeleteByIdServiceResponse], error)
}

// NewUserServiceClient constructs a client for the usermanagement.v1.UserService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		createUserService: connect_go.NewClient[proto.CreateUserServiceRequest, proto.CreateUserServiceResponse](
			httpClient,
			baseURL+UserServiceCreateUserServiceProcedure,
			opts...,
		),
		getAllUsersService: connect_go.NewClient[proto.GetAllUsersServiceRequest, proto.GetAllUsersServiceResponse](
			httpClient,
			baseURL+UserServiceGetAllUsersServiceProcedure,
			opts...,
		),
		getInfoService: connect_go.NewClient[proto.GetInfoServiceRequest, proto.GetInfoServiceResponse](
			httpClient,
			baseURL+UserServiceGetInfoServiceProcedure,
			opts...,
		),
		updateByIdService: connect_go.NewClient[proto.UpdateByIdServiceRequest, proto.UpdateByIdServiceResponse](
			httpClient,
			baseURL+UserServiceUpdateByIdServiceProcedure,
			opts...,
		),
		deleteByIdService: connect_go.NewClient[proto.DeleteByIdServiceRequest, proto.DeleteByIdServiceResponse](
			httpClient,
			baseURL+UserServiceDeleteByIdServiceProcedure,
			opts...,
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	createUserService  *connect_go.Client[proto.CreateUserServiceRequest, proto.CreateUserServiceResponse]
	getAllUsersService *connect_go.Client[proto.GetAllUsersServiceRequest, proto.GetAllUsersServiceResponse]
	getInfoService     *connect_go.Client[proto.GetInfoServiceRequest, proto.GetInfoServiceResponse]
	updateByIdService  *connect_go.Client[proto.UpdateByIdServiceRequest, proto.UpdateByIdServiceResponse]
	deleteByIdService  *connect_go.Client[proto.DeleteByIdServiceRequest, proto.DeleteByIdServiceResponse]
}

// CreateUserService calls usermanagement.v1.UserService.CreateUserService.
func (c *userServiceClient) CreateUserService(ctx context.Context, req *connect_go.Request[proto.CreateUserServiceRequest]) (*connect_go.Response[proto.CreateUserServiceResponse], error) {
	return c.createUserService.CallUnary(ctx, req)
}

// GetAllUsersService calls usermanagement.v1.UserService.GetAllUsersService.
func (c *userServiceClient) GetAllUsersService(ctx context.Context, req *connect_go.Request[proto.GetAllUsersServiceRequest]) (*connect_go.Response[proto.GetAllUsersServiceResponse], error) {
	return c.getAllUsersService.CallUnary(ctx, req)
}

// GetInfoService calls usermanagement.v1.UserService.GetInfoService.
func (c *userServiceClient) GetInfoService(ctx context.Context, req *connect_go.Request[proto.GetInfoServiceRequest]) (*connect_go.Response[proto.GetInfoServiceResponse], error) {
	return c.getInfoService.CallUnary(ctx, req)
}

// UpdateByIdService calls usermanagement.v1.UserService.UpdateByIdService.
func (c *userServiceClient) UpdateByIdService(ctx context.Context, req *connect_go.Request[proto.UpdateByIdServiceRequest]) (*connect_go.Response[proto.UpdateByIdServiceResponse], error) {
	return c.updateByIdService.CallUnary(ctx, req)
}

// DeleteByIdService calls usermanagement.v1.UserService.DeleteByIdService.
func (c *userServiceClient) DeleteByIdService(ctx context.Context, req *connect_go.Request[proto.DeleteByIdServiceRequest]) (*connect_go.Response[proto.DeleteByIdServiceResponse], error) {
	return c.deleteByIdService.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the usermanagement.v1.UserService service.
type UserServiceHandler interface {
	CreateUserService(context.Context, *connect_go.Request[proto.CreateUserServiceRequest]) (*connect_go.Response[proto.CreateUserServiceResponse], error)
	GetAllUsersService(context.Context, *connect_go.Request[proto.GetAllUsersServiceRequest]) (*connect_go.Response[proto.GetAllUsersServiceResponse], error)
	GetInfoService(context.Context, *connect_go.Request[proto.GetInfoServiceRequest]) (*connect_go.Response[proto.GetInfoServiceResponse], error)
	UpdateByIdService(context.Context, *connect_go.Request[proto.UpdateByIdServiceRequest]) (*connect_go.Response[proto.UpdateByIdServiceResponse], error)
	DeleteByIdService(context.Context, *connect_go.Request[proto.DeleteByIdServiceRequest]) (*connect_go.Response[proto.DeleteByIdServiceResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	userServiceCreateUserServiceHandler := connect_go.NewUnaryHandler(
		UserServiceCreateUserServiceProcedure,
		svc.CreateUserService,
		opts...,
	)
	userServiceGetAllUsersServiceHandler := connect_go.NewUnaryHandler(
		UserServiceGetAllUsersServiceProcedure,
		svc.GetAllUsersService,
		opts...,
	)
	userServiceGetInfoServiceHandler := connect_go.NewUnaryHandler(
		UserServiceGetInfoServiceProcedure,
		svc.GetInfoService,
		opts...,
	)
	userServiceUpdateByIdServiceHandler := connect_go.NewUnaryHandler(
		UserServiceUpdateByIdServiceProcedure,
		svc.UpdateByIdService,
		opts...,
	)
	userServiceDeleteByIdServiceHandler := connect_go.NewUnaryHandler(
		UserServiceDeleteByIdServiceProcedure,
		svc.DeleteByIdService,
		opts...,
	)
	return "/usermanagement.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceCreateUserServiceProcedure:
			userServiceCreateUserServiceHandler.ServeHTTP(w, r)
		case UserServiceGetAllUsersServiceProcedure:
			userServiceGetAllUsersServiceHandler.ServeHTTP(w, r)
		case UserServiceGetInfoServiceProcedure:
			userServiceGetInfoServiceHandler.ServeHTTP(w, r)
		case UserServiceUpdateByIdServiceProcedure:
			userServiceUpdateByIdServiceHandler.ServeHTTP(w, r)
		case UserServiceDeleteByIdServiceProcedure:
			userServiceDeleteByIdServiceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) CreateUserService(context.Context, *connect_go.Request[proto.CreateUserServiceRequest]) (*connect_go.Response[proto.CreateUserServiceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usermanagement.v1.UserService.CreateUserService is not implemented"))
}

func (UnimplementedUserServiceHandler) GetAllUsersService(context.Context, *connect_go.Request[proto.GetAllUsersServiceRequest]) (*connect_go.Response[proto.GetAllUsersServiceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usermanagement.v1.UserService.GetAllUsersService is not implemented"))
}

func (UnimplementedUserServiceHandler) GetInfoService(context.Context, *connect_go.Request[proto.GetInfoServiceRequest]) (*connect_go.Response[proto.GetInfoServiceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usermanagement.v1.UserService.GetInfoService is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateByIdService(context.Context, *connect_go.Request[proto.UpdateByIdServiceRequest]) (*connect_go.Response[proto.UpdateByIdServiceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usermanagement.v1.UserService.UpdateByIdService is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteByIdService(context.Context, *connect_go.Request[proto.DeleteByIdServiceRequest]) (*connect_go.Response[proto.DeleteByIdServiceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usermanagement.v1.UserService.DeleteByIdService is not implemented"))
}

// AuthServiceClient is a client for the usermanagement.v1.AuthService service.
type AuthServiceClient interface {
	LoginService(context.Context, *connect_go.Request[proto.LoginServiceRequest]) (*connect_go.Response[proto.LoginServiceResponse], error)
	UpdatePasswordService(context.Context, *connect_go.Request[proto.UpdatePasswordServiceRequest]) (*connect_go.Response[proto.UpdatePasswordServiceResponse], error)
}

// NewAuthServiceClient constructs a client for the usermanagement.v1.AuthService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		loginService: connect_go.NewClient[proto.LoginServiceRequest, proto.LoginServiceResponse](
			httpClient,
			baseURL+AuthServiceLoginServiceProcedure,
			opts...,
		),
		updatePasswordService: connect_go.NewClient[proto.UpdatePasswordServiceRequest, proto.UpdatePasswordServiceResponse](
			httpClient,
			baseURL+AuthServiceUpdatePasswordServiceProcedure,
			opts...,
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	loginService          *connect_go.Client[proto.LoginServiceRequest, proto.LoginServiceResponse]
	updatePasswordService *connect_go.Client[proto.UpdatePasswordServiceRequest, proto.UpdatePasswordServiceResponse]
}

// LoginService calls usermanagement.v1.AuthService.LoginService.
func (c *authServiceClient) LoginService(ctx context.Context, req *connect_go.Request[proto.LoginServiceRequest]) (*connect_go.Response[proto.LoginServiceResponse], error) {
	return c.loginService.CallUnary(ctx, req)
}

// UpdatePasswordService calls usermanagement.v1.AuthService.UpdatePasswordService.
func (c *authServiceClient) UpdatePasswordService(ctx context.Context, req *connect_go.Request[proto.UpdatePasswordServiceRequest]) (*connect_go.Response[proto.UpdatePasswordServiceResponse], error) {
	return c.updatePasswordService.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the usermanagement.v1.AuthService service.
type AuthServiceHandler interface {
	LoginService(context.Context, *connect_go.Request[proto.LoginServiceRequest]) (*connect_go.Response[proto.LoginServiceResponse], error)
	UpdatePasswordService(context.Context, *connect_go.Request[proto.UpdatePasswordServiceRequest]) (*connect_go.Response[proto.UpdatePasswordServiceResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	authServiceLoginServiceHandler := connect_go.NewUnaryHandler(
		AuthServiceLoginServiceProcedure,
		svc.LoginService,
		opts...,
	)
	authServiceUpdatePasswordServiceHandler := connect_go.NewUnaryHandler(
		AuthServiceUpdatePasswordServiceProcedure,
		svc.UpdatePasswordService,
		opts...,
	)
	return "/usermanagement.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceLoginServiceProcedure:
			authServiceLoginServiceHandler.ServeHTTP(w, r)
		case AuthServiceUpdatePasswordServiceProcedure:
			authServiceUpdatePasswordServiceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) LoginService(context.Context, *connect_go.Request[proto.LoginServiceRequest]) (*connect_go.Response[proto.LoginServiceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usermanagement.v1.AuthService.LoginService is not implemented"))
}

func (UnimplementedAuthServiceHandler) UpdatePasswordService(context.Context, *connect_go.Request[proto.UpdatePasswordServiceRequest]) (*connect_go.Response[proto.UpdatePasswordServiceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("usermanagement.v1.AuthService.UpdatePasswordService is not implemented"))
}
