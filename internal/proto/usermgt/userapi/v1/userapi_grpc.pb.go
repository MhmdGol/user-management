// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: usermgt/userapi/v1/userapi.proto

package userapiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_CreateUserService_FullMethodName  = "/usermgt.userapi.v1.UserService/CreateUserService"
	UserService_GetAllUsersService_FullMethodName = "/usermgt.userapi.v1.UserService/GetAllUsersService"
	UserService_GetInfoService_FullMethodName     = "/usermgt.userapi.v1.UserService/GetInfoService"
	UserService_UpdateByIdService_FullMethodName  = "/usermgt.userapi.v1.UserService/UpdateByIdService"
	UserService_DeleteByIdService_FullMethodName  = "/usermgt.userapi.v1.UserService/DeleteByIdService"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateUserService(ctx context.Context, in *CreateUserServiceRequest, opts ...grpc.CallOption) (*CreateUserServiceResponse, error)
	GetAllUsersService(ctx context.Context, in *GetAllUsersServiceRequest, opts ...grpc.CallOption) (*GetAllUsersServiceResponse, error)
	GetInfoService(ctx context.Context, in *GetInfoServiceRequest, opts ...grpc.CallOption) (*GetInfoServiceResponse, error)
	UpdateByIdService(ctx context.Context, in *UpdateByIdServiceRequest, opts ...grpc.CallOption) (*UpdateByIdServiceResponse, error)
	DeleteByIdService(ctx context.Context, in *DeleteByIdServiceRequest, opts ...grpc.CallOption) (*DeleteByIdServiceResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUserService(ctx context.Context, in *CreateUserServiceRequest, opts ...grpc.CallOption) (*CreateUserServiceResponse, error) {
	out := new(CreateUserServiceResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUserService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllUsersService(ctx context.Context, in *GetAllUsersServiceRequest, opts ...grpc.CallOption) (*GetAllUsersServiceResponse, error) {
	out := new(GetAllUsersServiceResponse)
	err := c.cc.Invoke(ctx, UserService_GetAllUsersService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetInfoService(ctx context.Context, in *GetInfoServiceRequest, opts ...grpc.CallOption) (*GetInfoServiceResponse, error) {
	out := new(GetInfoServiceResponse)
	err := c.cc.Invoke(ctx, UserService_GetInfoService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateByIdService(ctx context.Context, in *UpdateByIdServiceRequest, opts ...grpc.CallOption) (*UpdateByIdServiceResponse, error) {
	out := new(UpdateByIdServiceResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateByIdService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteByIdService(ctx context.Context, in *DeleteByIdServiceRequest, opts ...grpc.CallOption) (*DeleteByIdServiceResponse, error) {
	out := new(DeleteByIdServiceResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteByIdService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	CreateUserService(context.Context, *CreateUserServiceRequest) (*CreateUserServiceResponse, error)
	GetAllUsersService(context.Context, *GetAllUsersServiceRequest) (*GetAllUsersServiceResponse, error)
	GetInfoService(context.Context, *GetInfoServiceRequest) (*GetInfoServiceResponse, error)
	UpdateByIdService(context.Context, *UpdateByIdServiceRequest) (*UpdateByIdServiceResponse, error)
	DeleteByIdService(context.Context, *DeleteByIdServiceRequest) (*DeleteByIdServiceResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) CreateUserService(context.Context, *CreateUserServiceRequest) (*CreateUserServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserService not implemented")
}
func (UnimplementedUserServiceServer) GetAllUsersService(context.Context, *GetAllUsersServiceRequest) (*GetAllUsersServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsersService not implemented")
}
func (UnimplementedUserServiceServer) GetInfoService(context.Context, *GetInfoServiceRequest) (*GetInfoServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoService not implemented")
}
func (UnimplementedUserServiceServer) UpdateByIdService(context.Context, *UpdateByIdServiceRequest) (*UpdateByIdServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByIdService not implemented")
}
func (UnimplementedUserServiceServer) DeleteByIdService(context.Context, *DeleteByIdServiceRequest) (*DeleteByIdServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByIdService not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUserService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUserService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUserService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUserService(ctx, req.(*CreateUserServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllUsersService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUsersServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllUsersService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllUsersService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllUsersService(ctx, req.(*GetAllUsersServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetInfoService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetInfoService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetInfoService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetInfoService(ctx, req.(*GetInfoServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateByIdService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateByIdServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateByIdService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateByIdService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateByIdService(ctx, req.(*UpdateByIdServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteByIdService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIdServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteByIdService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteByIdService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteByIdService(ctx, req.(*DeleteByIdServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usermgt.userapi.v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserService",
			Handler:    _UserService_CreateUserService_Handler,
		},
		{
			MethodName: "GetAllUsersService",
			Handler:    _UserService_GetAllUsersService_Handler,
		},
		{
			MethodName: "GetInfoService",
			Handler:    _UserService_GetInfoService_Handler,
		},
		{
			MethodName: "UpdateByIdService",
			Handler:    _UserService_UpdateByIdService_Handler,
		},
		{
			MethodName: "DeleteByIdService",
			Handler:    _UserService_DeleteByIdService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usermgt/userapi/v1/userapi.proto",
}
